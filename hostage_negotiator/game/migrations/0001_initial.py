# Generated by Django 5.1.7 on 2025-03-25 06:08

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('last_played_date', models.DateField(blank=True, null=True)),
                ('current_streak', models.IntegerField(default=0)),
                ('highest_streak', models.IntegerField(default=0)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='ScenarioAttempt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('guest_identifier', models.CharField(blank=True, max_length=64, null=True)),
                ('scenario_name', models.CharField(max_length=128)),
                ('start_time', models.DateTimeField(auto_now_add=True)),
                ('end_time', models.DateTimeField(blank=True, null=True)),
                ('initial_tension', models.IntegerField()),
                ('initial_trust', models.IntegerField()),
                ('final_tension', models.IntegerField(null=True)),
                ('final_trust', models.IntegerField(null=True)),
                ('initial_hostages', models.IntegerField()),
                ('final_hostages', models.IntegerField(null=True)),
                ('success', models.BooleanField(default=False)),
                ('surrender_offered', models.BooleanField(default=False)),
                ('total_turns', models.IntegerField(default=0)),
                ('final_score', models.FloatField(null=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='scenario_attempts', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PlayerPromise',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('promise_text', models.TextField()),
                ('turn_made', models.IntegerField()),
                ('was_kept', models.BooleanField(default=False)),
                ('turn_resolved', models.IntegerField(null=True)),
                ('attempt', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='promises', to='game.scenarioattempt')),
            ],
        ),
        migrations.CreateModel(
            name='GameTurn',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('turn_number', models.IntegerField()),
                ('player_input', models.TextField()),
                ('game_response', models.TextField()),
                ('tension_change', models.IntegerField()),
                ('trust_change', models.IntegerField()),
                ('hostages_released', models.IntegerField(default=0)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('attempt', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='turns', to='game.scenarioattempt')),
            ],
            options={
                'ordering': ['turn_number'],
            },
        ),
        migrations.CreateModel(
            name='Score',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('guest_identifier', models.CharField(blank=True, max_length=64, null=True)),
                ('score', models.FloatField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('scenario_name', models.CharField(max_length=128)),
                ('is_daily', models.BooleanField(default=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='scores', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='GameProgress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('played_date', models.DateTimeField(auto_now_add=True)),
                ('success', models.BooleanField(default=False)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='game_progress', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'indexes': [models.Index(fields=['user', 'played_date'], name='game_gamepr_user_id_b82afa_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='scenarioattempt',
            index=models.Index(fields=['user', 'start_time'], name='game_scenar_user_id_7c9443_idx'),
        ),
        migrations.AddIndex(
            model_name='scenarioattempt',
            index=models.Index(fields=['scenario_name'], name='game_scenar_scenari_95e53f_idx'),
        ),
        migrations.AddIndex(
            model_name='playerpromise',
            index=models.Index(fields=['attempt'], name='game_player_attempt_56165a_idx'),
        ),
        migrations.AddIndex(
            model_name='gameturn',
            index=models.Index(fields=['attempt', 'turn_number'], name='game_gametu_attempt_44e5ac_idx'),
        ),
    ]
